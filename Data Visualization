
# Importing Libraries
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
#
# Importing CSV File
data = pd.read_csv("/Users/saiffallah.GREENTNS/Desktop/titanic.csv",sep=',')
data.head()
#
# Replace the missing values of the column "Age" with:
data['Age'].fillna(data['Age'].mean(),inplace=True)
#
# Histogram of different Age
plt.title("Histograme of different ages")
plt.xlabel("Age")
data['Age'].plot.hist()
#
# Histogram "Bar plot of Sex"
sns.countplot(x='Sex',data=data)
plt.ylabel("Sex Value count")
plt.title("Bar plot of Sex")
plt.xticks(rotation=-45)
#
# Histogram "Survived Bar Plot"
sns.countplot(x='Survived',data=data)
plt.title("Survived Bar Plot")
plt.ylabel("Value count")
plt.xticks([0, 1], ['Not Survived', 'Survived'],rotation=-45)
#
# Class Bar Plot
sns.countplot(x="Pclass", data=data)
plt.ylabel("Class Value count")
plt.xlabel(" ")
plt.title("Class Bar Plot")
plt.xticks([0, 1,2], ['First Class', 'Second Class', 'Third Class'],rotation=-45)
#
#
sns.countplot(x="Pclass", hue="Sex", data=data)
plt.title("Sex Bar Plot by Class")
plt.xlabel("")
plt.ylabel("Sex Value count")
plt.xticks([0, 1,2], ['First Class', 'Second Class', 'Third Class'],rotation=-45)
#
#
g=sns.catplot(x="Pclass", hue="Sex", col="Survived",
                data=data, kind="count",
                height=5, aspect=1);
(g.set_axis_labels("","Sex Value Count")
.set_xticklabels(["First Class", "Second Class", "Third Class"]))
#
# Corrolation between Sex & Age and their impact to the survival
g=sns.FacetGrid(data,col='Survived',height=2.2, aspect=1.6)
g.map(sns.barplot, 'Sex','Age',alpha=.5, ci=None)
g.add_legend()
#
# Corrolation between Sex & Age and their impact to the survival and Embarked
g=sns.FacetGrid(data,row='Embarked',col='Survived',height=2.2, aspect=1.6)
g.map(sns.barplot, 'Sex','Age',alpha=.5, ci=None)
g.add_legend()
#
# Corrolation between Sex & Age and their impact to the survival and Class
g=sns.FacetGrid(data,row='Pclass',col='Survived',height=2.2, aspect=1.6)
g.map(sns.barplot, 'Sex','Age',alpha=.5, ci=None)
g.add_legend()
#
#
## Looking at this function we can quickly see that:
## The diagonal line is the correlation of the variables to themselvese. 
## A co-efficient close to 1 means that thereâ€™s a very strong positive correlation between the two variables.
## - Survived is negligibly correlate to Fare & Patch,the variables are directly related. But is inversely related with SibSp, Age, Pclass and Passengerid 
## - Pclass is moderately correlate to Patch & negligibly correlate to SibSp, the variables are directly related. Is inversely Moderate related with Fare and inversely Low, Age and Survived. 
## - Age is lowly negative correlate to Pclass. 
## - Sibsp is lowly positive correlate to Parch and lowly negative correlate to Age.
## - Parch is lowly positive correlate to SibSp
## - Fare is moderately negative correlate to Pclass
## This function shows that SibSP and Parch move in the same direction.Also, Pclass and Fare move in opposite directions
#
# Use the groupby function combined with the mean() to view the relation between pclass and survive
data[['Pclass','Survived']].groupby(['Pclass'], as_index=True).mean().plot(kind='bar')
#
# create a new column called Title
data['Title']= data['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())
#
# Corrolation between Title and age and Survived
g=sns.FacetGrid(data,col='Survived',height=4, aspect=1.6)
g.map(sns.barplot, 'Title','Age',alpha=.5, ci=None)
(g.set_xticklabels(rotation=-45))
#
#
Title_Dictionary = {

                    "Capt":       "Officer",
                    "Col":        "Officer",
                    "Major":      "Officer",
                    "Jonkheer":   "Royalty",
                    "Don":        "Royalty",
                    "Sir" :       "Royalty",
                    "Dr":         "Officer",
                    "Rev":        "Officer",
                    "the Countess":"Royalty",
                    "Mme":        "Mrs",
                    "Mlle":       "Miss",
                    "Ms":         "Mrs",
                    "Mr" :        "Mr",
                    "Mrs" :       "Mrs",
                    "Miss" :      "Miss",
                    "Master" :    "Master",
                    "Lady" :      "Royalty"

                    }
data['Title']= data['Title'].map(Title_Dictionary)
#
#
plt.figure(figsize=(16,8))
sns.countplot(x='Title',data=data)
plt.xticks(rotation=-45)
#
#
sns.catplot(x="Title", hue="Sex", col="Survived",
                data=data, kind="count",
                height=5, aspect=1);
#
#
g=sns.FacetGrid(data,col='Title')
g.map(plt.hist,'Age', bins=20)
#
#
g=sns.FacetGrid(data,row='Pclass',col='Survived',height=2.2, aspect=1.6)
g.map(sns.barplot, 'Title','Age',alpha=.5, ci=None)
g.add_legend()
#
#
g=sns.FacetGrid(data,row='Embarked',col='Survived',height=2.2, aspect=1.6)
g.map(sns.barplot, 'Title','Age',alpha=.5, ci=None)
g.add_legend()
#
# Family Size Feature
data['Family_Size']=data['SibSp']+data['Parch']+1
#
# Family Size Plot
plt.figure(figsize=(16,8))
sns.countplot(x='Family_Size',data=data)
plt.xticks(rotation=-45)
#
# Survived Family Size
plt.figure(figsize=(16,8))
sns.catplot(x="Family_Size", hue="Pclass", col="Survived",
                data=data, kind="count",
                height=5, aspect=1);
#
#
plt.figure(figsize=(16,8))
g=sns.FacetGrid(data,row='Embarked',col='Survived',height=2.2, aspect=1.6)
g.map(sns.barplot, 'Family_Size','Age',alpha=.5, ci=None)
g.add_legend()
#
# Family size by categories
data['Family_Size_1']=data['Family_Size'].map(lambda s: 1 if s == 1 else 2 if s == 2 else 3 if 3<=s<=4 else 4 if s>=5 else 0)
#
# Family Size Category Plot
plt.figure(figsize=(16,8))
sns.countplot(x='Family_Size_1',data=data)
plt.title("Family Size Category")
plt.xlabel("Family Size")
plt.ylabel("Family Category Size Value")
plt.xticks([0, 1,2,3], ['First Category', 'Second Category', 'Third Category', 'Fourth Category'],rotation=-45)
#
# Plot "Survival rates for family size categories"
plt.figure(figsize=(16,8))
g=sns.catplot(x="Family_Size_1", hue="Pclass", col="Survived",
                data=data, kind="count",
                height=5, aspect=1);
(g.set_axis_labels("","Family Size Value")
.set_xticklabels(["1st Category", "2nd Category", "3rd Category", "4th Category"],rotation=-45)
 .set_titles("Survival rates for family size categories"))


